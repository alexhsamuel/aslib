#!/usr/bin/env python3

"""
Usage: {} [ Options ] PROGRAM [ ARG ... ]

Runs PROGRAM with ARGs and enhances the output.

  - Input to stdin is shown in boldface.
  - Output to stderr is shown in red.
  - Timestamps are shown for lines of output, at the right. 
  - The exit status and basic resource usage are shown on termination.

Note that the program will not work correctly if PROGRAM outputs ANSI escape
sequences, or otherwises uses the terminal in nontrivial ways.

Options:
  -h --help         Print usage information and exit.
  -t --truncate     Truncate long lines instead of wrapping.
"""

#-------------------------------------------------------------------------------

# FIXME: Handle KeyboardInterrupt correctly.
# FIXME: Handle BrokenPipeError correctly.
# FIXME: Handle escape sequences in stdout and stderr.

import asyncio
from   contextlib import closing, suppress
from   datetime import datetime
import os
import re
import resource
from   signal import Signals
from   subprocess import PIPE
import sys
import time

from   aslib.terminal import ansi, get_size

#-------------------------------------------------------------------------------

def get_signal_name(signum):
    try:
        return Signals(signum).name
    except ValueError:
        return "SIG???"


if sys.platform == "linux":
    MAX_RSS_UNITS = 1024
elif sys.platform == "darwin":
    MAX_RSS_UNITS = 1
else:
    raise NotImplementedError("no MAX_RSS_UNITS for {}".format(sys.platform))

#-------------------------------------------------------------------------------

KEYBOARD_INTERRUPT_EXIT_STATUS = -Signals.SIGINT

STDERR_COLOR    = "#800000"
TIME_STYLE      = ansi.style(fg="gray50")
EXIT_STYLE      = ansi.style(fg="gray50")
ERROR_STYLE     = ansi.style(fg="#800000")
USAGE_STYLE     = ansi.style(fg="#0055aa")

# Length in characters of a line timestamp.
TIMESTAMP_LEN   = 12

# Our own output goes to stdout.
write = sys.stdout.write
flush = sys.stdout.flush

# The terminal width.
width, _    = get_size()  # FIXME: Should be dynamic.
# Printing \b doesn't work correctly if we wrap the terminal.
width -= 1

# The current column.
col         = 0
# If true, truncate lines instead of wrapping.
truncate    = False

last_timestamp = None

def show_time(time):
    global last_timestamp

    timestamp = format(time, "%H:%M:%S.%f")[: -3]
    assert len(timestamp) == TIMESTAMP_LEN

    if timestamp != last_timestamp:
        # write(ansi.to_column(width - len(timestamp)))
        write(" " * (width - col - TIMESTAMP_LEN))
        write(TIME_STYLE(timestamp))
        # write(ansi.to_column(col))
        write("\b" * (width - col))
        last_timestamp = timestamp
    

def show(text, time, fg):
    global col
    global last_timestamp

    max_col = width - TIMESTAMP_LEN - 1

    for line in re.split(r"(\n)", text):
        if line == "":
            pass
        elif line == "\n":
            col = 0
            write("\n")
        else:
            assert "\n" not in line
            # Set the color, and turn off bold.
            write(ansi.sgr(fg=fg, bold=False))

            this = line[: max_col - col]
            line = line[max_col - col :]
            col += write(this)

            if truncate and len(line) > 0:
                write(TIME_STYLE("\u2026"))
                line = ""

            show_time(time)

            while len(line) > 0:
                write(TIME_STYLE("\u21b5\n"))
                this = line[: max_col]
                line = line[max_col :]
                col = write(this)
                show_time(time)
                
    # Disable the color, and reenable bold for stdin.
    write(ansi.sgr(fg="default", bold=True))

    flush()


async def format_output(stream, fg):
    while True:
        # Wait for some output to be available.
        output = await stream.read(1)
        if len(output) == 0:
            break
        time = datetime.now()
        # Read whatever's available in the buffer.
        buf_len = len(stream._buffer)
        if buf_len > 0:
            output += await stream.read(buf_len)
        show(output.decode(), time, fg)


async def run_command(loop, argv):
    proc = await asyncio.create_subprocess_exec(
        *argv, loop=loop, stdout=PIPE, stderr=PIPE)

    stdout = format_output(proc.stdout, None)
    stderr = format_output(proc.stderr, STDERR_COLOR)

    try:
        result, *_ = await asyncio.gather(proc.wait(), stdout, stderr)
    except KeyboardInterrupt:
        show("\n")
        return KEYBOARD_INTERRUPT_EXIT_STATUS
    else:
        return result


def run(argv):
    # Reset the terminal, and set it to bold to style stdin.
    write(ansi.NORMAL + ansi.BOLD)
    flush()

    try:
        with closing(asyncio.get_event_loop()) as loop:
            start = time.monotonic()
            try:
                exit = loop.run_until_complete(run_command(loop, argv))
            except KeyboardInterrupt:
                exit = KEYBOARD_INTERRUPT_EXIT_STATUS
            end = time.monotonic()

        usage = resource.getrusage(resource.RUSAGE_CHILDREN)
        maxrss = usage.ru_maxrss * MAX_RSS_UNITS

        write(ansi.NORMAL_INTENSITY)
        if col != 0:
            write("\n")
        # Show the exit status.
        write(
            EXIT_STYLE("exit: ")
            + (USAGE_STYLE("0") if exit == 0
               else ERROR_STYLE(str(exit)) if exit > 0 
               else ERROR_STYLE(get_signal_name(-exit)))
            + " ")
        # Show resource usage.
        write(" ".join(
            EXIT_STYLE(l + ": ") + USAGE_STYLE(v)
            for l, v in (
                    ("real", format(end - start, ".3f")),
                    ("user", format(usage.ru_utime, ".3f")),
                    ("sys", format(usage.ru_stime, ".3f")),
                    ("RSS", format(maxrss / 1024**2, ".0f") + "M"),
            )
        ) + "\n")

        raise SystemExit(exit)

    finally:
        write(ansi.RESET)


#-------------------------------------------------------------------------------

def exit_usage(error=None):
    out = sys.stdout if error is None else sys.stderr
    if error is not None:
        print(error, file=out)
    this_prog = os.path.basename(sys.argv[0])
    print(__doc__.format(this_prog), file=out)
    raise SystemExit(os.EX_USAGE if error is None else os.EX_OK)


def main():
    global truncate

    # We don't use argparse, as we want to accept optional arguments only
    # at the beginning of argv.
    argv = sys.argv[1 :]
    while len(argv) > 0 and argv[0].startswith("-"):
        arg = argv.pop(0)
        if arg in ("-h", "--help"):
            exit_usage()
        elif arg in ("-t", "--truncate"):
            truncate = True
        else:
            exit_usage("Unknown option: {}\n".format(arg))
    if len(argv) < 1:
        exit_usage("no PROGRAM given")

    run(argv)


if __name__ == "__main__":
    main()


